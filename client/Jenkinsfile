@Library('CanLibrary') _
pipeline {
    agent any
    tools {
        nodejs 'node-11.10.0'
    }
    stages {
        stage('Cleanup') {
          steps{
            cleanWs()
          }
        }
        stage('SCM Checkout') {
            steps {
              script {
                checkOutGitSSH('development','jenk','LinoHallerRios','AppLecturas')
              }
            }
        }
        stage('Install'){
          steps {
            sh 'cd client && npm install'
          }
        }
        stage('Build'){
          steps {
            sh 'cd client && npm run build'
          }
        }
        stage('Dump .sql'){
          steps {
            script {
              dumpXampp('root','localhost','3306','app_lecturas','/c/devops/backup-sql/app_lecturas.sql')
            }
          }
        }
        stage('Deploy Bluemix'){
          steps {
            withCredentials([string(credentialsId: 'ApiKey', variable: 'varApiKey')]) {
              sh 'ibmcloud login --apikey $varApiKey && ibmcloud target --cf && cd client && ibmcloud cf push applectura'
              sh 'ibmcloud login --apikey $varApiKey && ibmcloud target --cf && cd server && ibmcloud cf push applectura-server'
            }
          }
        }
        stage('Sonar Gate') {
          steps{
            script {
              withSonarQubeEnv('sonar-6') {
                sh 'cd ../.. && cd tools/hudson.plugins.sonar.SonarRunnerInstallation/sonar33/bin && ./sonar-scanner'
              }
              def qg = waitForQualityGate()
              if (qg.status != 'OK') {
                error "Pipeline abortado por no pasar quality gates: ${qg.status}"
              }
            }
          }
        }
    }
}
