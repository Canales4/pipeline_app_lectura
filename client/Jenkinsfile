pipeline {
    agent any
    tools {
        nodejs 'node-11.10.0'
    }
    stages {
        stage('SCM Checkout') {
            steps {
                git branch: 'development', credentialsId: 'jenk', url: 'git@github.com:LinoHallerRios/AppLecturas.git'
            }
        }
        stage('Install'){
          steps {
            parallel 'Server Install': {
              script {
                sh 'cd server && npm install'
              }
            }, 'Client Install': {
              sh 'cd client && npm install'
            }
          }
        }
        stage('Build'){
          steps {
            parallel 'Client Build': {
              sh 'cd client && npm run build'
            }, 'Server Build': {
              sh 'cd server && nodemon ./bin/server.js'
            }, 'Dump .sql': {
              sh 'cd /c/xampp/mysql/bin && ./mysqldump --user=admin --host=172.21.57.79 --protocol=tcp --port=3306 --default-character-set=utf8 "app_lecturas" > /c/backup_mysqldb/app_lecturas.sql'
              sh 'cp /c/backup_mysqldb/app_lecturas.sql /c/Users/6001290/Desktop/jobs/AppLecturas'
              sh 'cd /c/Users/6001290/Desktop/jobs/AppLecturas && git add . && git commit -m "auto-backup" && git push origin git@github.com:LinoHallerRios/AppLecturas.git'
            }
          }
        }
        stage('Sonar Gate') {
          steps{
            script {
              withSonarQubeEnv('sonar-6') {
                sh 'cd ../.. && cd tools/hudson.plugins.sonar.SonarRunnerInstallation/sonar33/bin && ./sonar-scanner'
              }
              def qg = waitForQualityGate()
              if (qg.status != 'OK') {
                error "Pipeline abortado por no pasar quality gates: ${qg.status}"
              }
            }
          }
        }
        stage('IBMCloud Deploy') {
          steps {
            script {
              sh 'echo Realizando deploy en Ibmcloud...'
            }
          }
        }
    }
}
